SL_all_model =
"
SL_RT =~ SEGM_AL_medRT_TRN3_RND4 + SEGM_AL_medRT_RND4_REC5
SL_ACC =~ SEGM_AL_ACC_TRN3_RND4 + SEGM_AL_ACC_RND4_REC5
SL_offline =~ SEGM_AL_2AFC_trigram + SEGM_AL_SEGM_prod_data + AGL_2AFC_phr + AGL_2AFC_sent + AGL_prod
"
SL_fit_adult = cfa(SL_adult_model, filter(df, age_years > 14))
SL_fit_all = cfa(SL_all_model, df)
summary(SL_fit_adult, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
summary(SL_fit_all, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
LA_model =
"
offline =~ MENYET_mean_ACC_all + trog_pragm_ACC_mean
reading =~ OMR_read_syls + selfpaced_target_RT_diff_GP + selfpaced_target_RT_diff_sertes
"
LA_fit_adult = cfa(LA_model, filter(df, age_years > 14))
LA_fit_all = cfa(LA_model, df)
summary(LA_fit_adult, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
summary(LA_fit_all, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
SL_model =
"
SL_RT =~ SEGM_AL_medRT_TRN3_RND4 + SEGM_AL_medRT_RND4_REC5
SL_ACC =~ SEGM_AL_ACC_TRN3_RND4 + SEGM_AL_ACC_RND4_REC5
SL_offline =~ SEGM_AL_2AFC_trigram + SEGM_AL_SEGM_prod_data + AGL_2AFC_phr + AGL_2AFC_sent + AGL_prod
"
SL_fit_adult = cfa(SL_model, filter(df, age_years > 14))
SL_fit_all = cfa(SL_model, df)
summary(SL_fit_adult, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
summary(SL_fit_all, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
tidy(anova(SL_fit_adult, SL_fit_all))
CG_model =
"
PS =~ PROC_SPEED_vis_RT_med + PROC_SPEED_vis_dec_RT_med + stroop_RT_score + simon_RT_score
DS =~ digit_span_forward_span + digit_span_backward_span
nback =~ n_back_nback_1_dprime + n_back_nback_2_dprime + n_back_nback_3_dprime
"
CG_fit_adult = cfa(CG_model, filter(df, age_years > 14))
CG_fit_all = cfa(CG_model, df)
summary(CG_fit_adult, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
summary(CG_fit_all, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
anova(CG_fit_adult, CG_fit_all)
LA_model =
"
offline =~ MENYET_mean_ACC_all + trog_pragm_ACC_mean
reading =~ OMR_read_syls + selfpaced_target_RT_diff_GP + selfpaced_target_RT_diff_sertes
"
LA_fit_adult = cfa(LA_model, filter(df, age_years > 14))
LA_fit_all = cfa(LA_model, df)
summary(LA_fit_adult, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
anova(LA_fit_adult, LA_fit_all)
tidy(anova(LA_fit_adult, LA_fit_all))
tidy(anova(CG_fit_adult, CG_fit_all))
remove(list = ls())
library(tidyverse)
library(lavaan)
library(semTools)
library(broom)
df <- read.csv("~/GitHub/lendulet_language_SL/SEM/dataframes/SEM_df.csv")
#df = read.csv(readline("Path of dataframe (e.g., C:/experiment/df.csv): "))
df[, 17:33] = sapply(df[, 17:33], scale)
df[, 35:56] = sapply(df[, 35:56], scale)
df[, 58:74] = sapply(df[, 58:74], scale)
SL_fit_adult = cfa(SL_model, filter(df, age_years > 14))
SL_model =
"
SL_RT =~ a1*SEGM_AL_medRT_TRN3_RND4 + a2*SEGM_AL_medRT_RND4_REC5
SL_ACC =~ b1*SEGM_AL_ACC_TRN3_RND4 + b2*SEGM_AL_ACC_RND4_REC5
SL_offline =~ c1*SEGM_AL_2AFC_trigram + c2*SEGM_AL_SEGM_prod_data + c3*AGL_2AFC_phr + c4*AGL_2AFC_sent + c5*AGL_prod
"
SL_fit_adult = cfa(SL_model, filter(df, age_years > 14))
SL_fit_all = cfa(SL_model, df)
summary(SL_fit_adult, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
summary(SL_fit_all, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
SL_model =
"
SL_RT =~ a1*SEGM_AL_medRT_TRN3_RND4 + a2*SEGM_AL_medRT_RND4_REC5
SL_ACC =~ b1*SEGM_AL_ACC_TRN3_RND4 + b2*SEGM_AL_ACC_RND4_REC5
SL_offline =~ c1*SEGM_AL_2AFC_trigram + c2*SEGM_AL_SEGM_prod_data + c3*AGL_2AFC_phr + c4*AGL_2AFC_sent + c5*AGL_prod
"
SL_fit_adult = cfa(SL_model, filter(df, age_years > 14))
SL_fit_all = cfa(SL_model, df)
summary(SL_fit_adult, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
SL_model =
"
SL_RT =~ a1*SEGM_AL_medRT_TRN3_RND4 + a2*SEGM_AL_medRT_RND4_REC5
SL_ACC =~ b2*SEGM_AL_ACC_RND4_REC5 + b1*SEGM_AL_ACC_TRN3_RND4
SL_offline =~ c1*SEGM_AL_2AFC_trigram + c2*SEGM_AL_SEGM_prod_data + c3*AGL_2AFC_phr + c4*AGL_2AFC_sent + c5*AGL_prod
"
SL_fit_adult = cfa(SL_model, filter(df, age_years > 14))
SL_fit_all = cfa(SL_model, df)
summary(SL_fit_adult, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
summary(SL_fit_all, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
SL_model =
"
SL_RT =~ a1*SEGM_AL_medRT_TRN3_RND4 + a2*SEGM_AL_medRT_RND4_REC5
SL_ACC =~ b1*SEGM_AL_ACC_RND4_REC5 + b1*SEGM_AL_ACC_TRN3_RND4
SL_offline =~ c1*SEGM_AL_2AFC_trigram + c2*SEGM_AL_SEGM_prod_data + c3*AGL_2AFC_phr + c4*AGL_2AFC_sent + c5*AGL_prod
"
SL_fit_adult = cfa(SL_model, filter(df, age_years > 14))
SL_fit_all = cfa(SL_model, df)
summary(SL_fit_adult, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
summary(SL_fit_all, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
View(df)
df <- read.csv("~/GitHub/lendulet_language_SL/SEM/dataframes/SEM_df.csv")
#df = read.csv(readline("Path of dataframe (e.g., C:/experiment/df.csv): "))
df[, 17:33] = sapply(df[, 17:33], scale)
df[, 35:56] = sapply(df[, 35:56], scale)
df[, 58:74] = sapply(df[, 58:74], scale)
library(tidyverse)
library(lavaan)
library(semTools)
library(broom)
df %>% mutate(age_group = case_when(age_years <= 14 ~ "child", age_years > 14 ~ "adult"))
# configural invariance
fit1 = cfa(SL_model, data = df, group = "age_group")
SL_model =
"
SL_RT =~ a1*SEGM_AL_medRT_TRN3_RND4 + a2*SEGM_AL_medRT_RND4_REC5
SL_ACC =~ b1*SEGM_AL_ACC_RND4_REC5 + b1*SEGM_AL_ACC_TRN3_RND4
SL_offline =~ c1*SEGM_AL_2AFC_trigram + c2*SEGM_AL_SEGM_prod_data + c3*AGL_2AFC_phr + c4*AGL_2AFC_sent + c5*AGL_prod
"
# configural invariance
fit1 = cfa(SL_model, data = df, group = "age_group")
df %>% mutate(age_group = case_when(age_years <= 14 ~ "child", age_years > 14 ~ "adult"))
df2 = df %>% mutate(age_group = case_when(age_years <= 14 ~ "child", age_years > 14 ~ "adult"))
# configural invariance
fit1 = cfa(SL_model, data = df, group = "age_group")
# configural invariance
fit1 = cfa(SL_model, data = df2, group = "age_group")
# weak invariance
fit2 = cfa(SL_model, data = df2, group = "age_group",
group.equal = "loadings")
# strong invariance
fit3 = cfa(SL_model, data = df2, group = "age_group",
group.equal = c("intercepts", "loadings"))
# model comparison tests
lavTestLRT(fit1, fit2, fit3)
SL_model =
"
SL_RT =~ a1*SEGM_AL_medRT_TRN3_RND4 + a2*SEGM_AL_medRT_RND4_REC5
SL_ACC =~ b1*SEGM_AL_ACC_RND4_REC5 + b2*SEGM_AL_ACC_TRN3_RND4
SL_offline =~ c1*SEGM_AL_2AFC_trigram + c2*SEGM_AL_SEGM_prod_data + c3*AGL_2AFC_phr + c4*AGL_2AFC_sent + c5*AGL_prod
"
# configural invariance
fit1 = cfa(SL_model, data = df2, group = "age_group")
# weak invariance
fit2 = cfa(SL_model, data = df2, group = "age_group",
group.equal = "loadings")
# strong invariance
fit3 = cfa(SL_model, data = df2, group = "age_group",
group.equal = c("intercepts", "loadings"))
# model comparison tests
lavTestLRT(fit1, fit2, fit3)
SL_model =
"
SL_RT =~ a1*SEGM_AL_medRT_TRN3_RND4 + a2*SEGM_AL_medRT_RND4_REC5
SL_ACC =~ b1*SEGM_AL_ACC_RND4_REC5 + b2*SEGM_AL_ACC_TRN3_RND4
SL_offline =~ c1*SEGM_AL_2AFC_trigram + c2*SEGM_AL_SEGM_prod_data + c3*AGL_2AFC_phr + c4*AGL_2AFC_sent + c5*AGL_prod
"
# configural invariance
fit1 = cfa(SL_model, data = df2, group = "age_group")
# weak invariance
fit2 = cfa(SL_model, data = df2, group = "age_group",
group.equal = "loadings")
# strong invariance
fit3 = cfa(SL_model, data = df2, group = "age_group",
group.equal = c("intercepts", "loadings"))
# model comparison tests
lavTestLRT(fit1, fit2, fit3)
View(df2)
View(df2)
SL_model =
"
SL_RT =~ SEGM_AL_medRT_TRN3_RND4 + SEGM_AL_medRT_RND4_REC5
SL_ACC =~ SEGM_AL_ACC_RND4_REC5 + SEGM_AL_ACC_TRN3_RND4
SL_offline =~ SEGM_AL_2AFC_trigram + SEGM_AL_SEGM_prod_data + AGL_2AFC_phr + AGL_2AFC_sent + AGL_prod
"
# configural invariance
fit1 = cfa(SL_model, data = df2, group = "age_group")
# weak invariance
fit2 = cfa(SL_model, data = df2, group = "age_group",
group.equal = "loadings")
# strong invariance
fit3 = cfa(SL_model, data = df2, group = "age_group",
group.equal = c("intercepts", "loadings"))
# model comparison tests
lavTestLRT(fit1, fit2, fit3)
SL_model =
"
SL_RT =~ SEGM_AL_medRT_TRN3_RND4 + SEGM_AL_medRT_RND4_REC5
SL_ACC =~ 1*SEGM_AL_ACC_RND4_REC5 + SEGM_AL_ACC_TRN3_RND4
SL_offline =~ SEGM_AL_2AFC_trigram + SEGM_AL_SEGM_prod_data + AGL_2AFC_phr + AGL_2AFC_sent + AGL_prod
"
summary(SL_fit_adult, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
summary(SL_fit_adult, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
SL_fit_adult = cfa(SL_model, filter(df, age_years > 14))
SL_fit_all = cfa(SL_model, df)
summary(SL_fit_adult, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
SL_model =
"
SL_RT =~ SEGM_AL_medRT_TRN3_RND4 + SEGM_AL_medRT_RND4_REC5
SL_ACC =~ 1*SEGM_AL_ACC_RND4_REC5 + 1*SEGM_AL_ACC_TRN3_RND4
SL_offline =~ SEGM_AL_2AFC_trigram + SEGM_AL_SEGM_prod_data + AGL_2AFC_phr + AGL_2AFC_sent + AGL_prod
"
SL_fit_adult = cfa(SL_model, filter(df, age_years > 14))
SL_fit_all = cfa(SL_model, df)
summary(SL_fit_adult, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
# configural invariance
fit1 = cfa(SL_model, data = df2, group = "age_group")
# weak invariance
fit2 = cfa(SL_model, data = df2, group = "age_group",
group.equal = "loadings")
# strong invariance
fit3 = cfa(SL_model, data = df2, group = "age_group",
group.equal = c("intercepts", "loadings"))
# model comparison tests
lavTestLRT(fit1, fit2, fit3)
CG_model =
"
PS =~ PROC_SPEED_vis_RT_med + PROC_SPEED_vis_dec_RT_med + stroop_RT_score + simon_RT_score
DS =~ digit_span_forward_span + digit_span_backward_span
nback =~ n_back_nback_1_dprime + n_back_nback_2_dprime + n_back_nback_3_dprime
"
CG_fit_adult = cfa(CG_model, filter(df, age_years > 14))
CG_fit_all = cfa(CG_model, df)
summary(CG_fit_adult, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
summary(CG_fit_all, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
# configural invariance
fit1 = cfa(CG_model, data = df2, group = "age_group")
# weak invariance
fit2 = cfa(CG_model, data = df2, group = "age_group",
group.equal = "loadings")
# strong invariance
fit3 = cfa(CG_model, data = df2, group = "age_group",
group.equal = c("intercepts", "loadings"))
# model comparison tests
lavTestLRT(fit1, fit2, fit3)
CG_model =
"
PS =~ PROC_SPEED_vis_RT_med + PROC_SPEED_vis_dec_RT_med + stroop_RT_score + simon_RT_score
DS =~ digit_span_forward_span + digit_span_backward_span
nback =~ n_back_nback_1_dprime + n_back_nback_2_dprime + n_back_nback_3_dprime
"
# configural invariance
fit1 = cfa(CG_model, data = df2, group = "age_group")
# weak invariance
fit2 = cfa(CG_model, data = df2, group = "age_group",
group.equal = "loadings")
# strong invariance
fit3 = cfa(CG_model, data = df2, group = "age_group",
group.equal = c("intercepts", "loadings"))
# model comparison tests
lavTestLRT(fit1, fit2, fit3)
LA_model =
"
offline =~ MENYET_mean_ACC_all + trog_pragm_ACC_mean
reading =~ OMR_read_syls + selfpaced_target_RT_diff_GP + selfpaced_target_RT_diff_sertes
"
LA_fit_adult = cfa(LA_model, filter(df, age_years > 14))
LA_fit_all = cfa(LA_model, df)
LA_fit_adult = cfa(LA_model, filter(df, age_years > 14))
LA_fit_all = cfa(LA_model, df)
summary(LA_fit_adult, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
summary(LA_fit_all, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
# configural invariance
fit1 = cfa(LA_model, data = df2, group = "age_group")
myCov <- cov(df2)
myCov <- cov(c(df2$selfpaced_target_RT_diff_GP, df2$selfpaced_target_RT_diff_sertes))
# configural invariance
fit1 = cfa(LA_model, data = df2, group = "age_group")
View(fit1)
View(fit1)
# configural invariance
fit1 = cfa(CG_model, data = df2, group = "age_group")
# weak invariance
#fit2 = cfa(CG_model, data = df2, group = "age_group",
#            group.equal = "loadings")
# strong invariance
#fit3 = cfa(CG_model, data = df2, group = "age_group",
#            group.equal = c("intercepts", "loadings"))
# model comparison tests
#lavTestLRT(fit1, fit2, fit3)
# configural invariance
fit1_cg = cfa(CG_model, data = df2, group = "age_group")
# weak invariance
#fit2_cg = cfa(CG_model, data = df2, group = "age_group",
#            group.equal = "loadings")
# strong invariance
#fit3_cg = cfa(CG_model, data = df2, group = "age_group",
#            group.equal = c("intercepts", "loadings"))
# model comparison tests
#lavTestLRT(fit1_cg, fit2_cg, fit3_cg)
View(fit1_cg)
View(fit1_cg)
CG_fit_adult = cfa(CG_model, filter(df, age_years > 14))
CG_fit_all = cfa(CG_model, df)
summary(CG_fit_adult, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
SL_model =
"
SL_RT =~ SEGM_AL_medRT_TRN3_RND4 + SEGM_AL_medRT_RND4_REC5
SL_ACC =~ 1*SEGM_AL_ACC_RND4_REC5 + 1*SEGM_AL_ACC_TRN3_RND4
SL_offline =~ SEGM_AL_2AFC_trigram + SEGM_AL_SEGM_prod_data + AGL_2AFC_phr + AGL_2AFC_sent + AGL_prod
"
SL_fit_adult = cfa(SL_model, filter(df, age_years > 14))
SL_fit_all = cfa(SL_model, df)
summary(SL_fit_adult, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
summary(SL_fit_all, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
SL_fit_adult = cfa(SL_model, filter(df, age_years > 14), missing = "ml")
SL_fit_all = cfa(SL_model, df)
SL_fit_adult = cfa(SL_model, filter(df, age_years > 14), missing = "ML")
SL_fit_all = cfa(SL_model, df)
summary(SL_fit_adult, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
SL_model =
"
SL_RT =~ SEGM_AL_medRT_TRN3_RND4 + SEGM_AL_medRT_RND4_REC5
SL_ACC =~ SEGM_AL_ACC_RND4_REC5 + SEGM_AL_ACC_TRN3_RND4
SL_offline =~ SEGM_AL_2AFC_trigram + SEGM_AL_SEGM_prod_data + AGL_2AFC_phr + AGL_2AFC_sent + AGL_prod
"
summary(SL_fit_adult, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
SL_fit_adult = cfa(SL_model, filter(df, age_years > 14), missing = "ML")
SL_fit_all = cfa(SL_model, df, missing = "ML")
summary(SL_fit_adult, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
summary(SL_fit_all, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
library(tidyverse)
library(psych)
library(GPArotation)
library(broom)
df <- read.csv("~/GitHub/lendulet_language_SL/SEM/dataframes/SEM_df.csv")
#df = read.csv(readline("Path of dataframe (e.g., C:/experiment/df.csv): "))
df %>%
select(
#SEGM_AL_medRT_train,
SEGM_AL_medRT_TRN3_RND4,
SEGM_AL_medRT_RND4_REC5,
#SEGM_AL_ACC_train,
SEGM_AL_ACC_TRN3_RND4,
SEGM_AL_ACC_RND4_REC5,
#SEGM_AL_2AFC_bigram,
SEGM_AL_2AFC_trigram,
SEGM_AL_SEGM_prod_data,
#AGL_ACC_train,
AGL_2AFC_phr,
AGL_2AFC_sent,
AGL_prod
) %>%
fa.parallel(fm = "ml", fa = "fa")
SL_EFA = df %>%
select(
#SEGM_AL_medRT_train,
SEGM_AL_medRT_TRN3_RND4,
SEGM_AL_medRT_RND4_REC5,
#SEGM_AL_ACC_train,
SEGM_AL_ACC_TRN3_RND4,
SEGM_AL_ACC_RND4_REC5,
#SEGM_AL_2AFC_bigram,
SEGM_AL_2AFC_trigram,
SEGM_AL_SEGM_prod_data,
#AGL_ACC_train,
AGL_2AFC_phr,
AGL_2AFC_sent,
AGL_prod
) %>%
# maximum likelihood
fa(
nfactors = 3,
fm = "ml",
rotate = "Promax",
use = "pairwise",
cor = "cor",
scores = "regression",
missing = TRUE,
impute = "mean"
)
View(SL_EFA)
View(SL_EFA)
SL_model =
"
SL_RT =~ SEGM_AL_medRT_TRN3_RND4 + SEGM_AL_medRT_RND4_REC5
SL_ACC =~ SEGM_AL_ACC_RND4_REC5 + SEGM_AL_ACC_TRN3_RND4
SL_offline =~ SEGM_AL_2AFC_trigram + SEGM_AL_SEGM_prod_data + AGL_2AFC_phr + AGL_2AFC_sent + AGL_prod
"
SL_fit_adult = cfa(SL_model, filter(df, age_years > 14), missing = "ML")
SL_fit_all = cfa(SL_model, df, missing = "ML")
View(df)
View(df)
summary(SL_fit_all, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
SL_fit_adult = cfa(SL_model, filter(df, age_years > 14), missing = "ML", estimator = "ML")
SL_fit_all = cfa(SL_model, df, missing = "ML", estimator = "ML")
SL_model =
"
SL_RT =~ SEGM_AL_medRT_TRN3_RND4 + SEGM_AL_medRT_RND4_REC5
SL_ACC =~ 1*SEGM_AL_ACC_RND4_REC5 + 1*SEGM_AL_ACC_TRN3_RND4
SL_offline =~ SEGM_AL_2AFC_trigram + SEGM_AL_SEGM_prod_data + AGL_2AFC_phr + AGL_2AFC_sent + AGL_prod
"
SL_fit_adult = cfa(SL_model, filter(df, age_years > 14), missing = "ML", estimator = "ML")
SL_fit_all = cfa(SL_model, df, missing = "ML", estimator = "ML")
summary(SL_fit_adult, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
summary(SL_fit_all, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
# configural invariance
fit1_SL = cfa(SL_model, data = df2, group = "age_group", missing = "ML", estimator = "ML")
df2 = df %>% mutate(age_group = case_when(age_years <= 14 ~ "child", age_years > 14 ~ "adult"))
# configural invariance
fit1_SL = cfa(SL_model, data = df2, group = "age_group", missing = "ML", estimator = "ML")
# weak invariance
fit2_SL = cfa(SL_model, data = df2, group = "age_group", missing = "ML", estimator = "ML",
group.equal = "loadings")
# strong invariance
fit3_SL = cfa(SL_model, data = df2, group = "age_group", missing = "ML", estimator = "ML",
group.equal = c("intercepts", "loadings"))
# model comparison tests
lavTestLRT(fit1, fit2, fit3)
# configural invariance
fit1_SL = cfa(SL_model, data = df2, group = "age_group", missing = "ML", estimator = "ML")
# weak invariance
fit2_SL = cfa(SL_model, data = df2, group = "age_group", missing = "ML", estimator = "ML",
group.equal = "loadings")
# strong invariance
fit3_SL = cfa(SL_model, data = df2, group = "age_group", missing = "ML", estimator = "ML",
group.equal = c("intercepts", "loadings"))
# model comparison tests
lavTestLRT(fit1_SL, fit2_SL, fit3_SL)
CG_model =
"
PS =~ PROC_SPEED_vis_RT_med + PROC_SPEED_vis_dec_RT_med + stroop_RT_score + simon_RT_score
DS =~ digit_span_forward_span + digit_span_backward_span
nback =~ n_back_nback_1_dprime + n_back_nback_2_dprime + n_back_nback_3_dprime
"
CG_fit_adult = cfa(CG_model, filter(df, age_years > 14), missing = "ML", estimator = "ML")
CG_fit_all = cfa(CG_model, df, missing = "ML", estimator = "ML")
summary(CG_fit_adult, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
summary(CG_fit_all, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
tidy(anova(CG_fit_adult, CG_fit_all))
# configural invariance
fit1_cg = cfa(CG_model, data = df2, group = "age_group", missing = "ML", estimator = "ML")
# metric invariance
fit2_cg = cfa(CG_model, data = df2, group = "age_group", missing = "ML", estimator = "ML",
group.equal = "loadings")
# scalar invariance
fit3_cg = cfa(CG_model, data = df2, group = "age_group", missing = "ML", estimator = "ML",
group.equal = c("intercepts", "loadings"))
# model comparison tests
lavTestLRT(fit1_cg, fit2_cg, fit3_cg)
df2 = df %>% mutate(age_group = case_when(age_years <= 14 ~ "child", age_years > 14 ~ "adult"))
df2 = apply(df2, 2, scale)
View(df)
View(df)
View(df)
View(df2)
LA_model =
"
offline =~ MENYET_mean_ACC_all + trog_pragm_ACC_mean
reading =~ OMR_read_syls + selfpaced_target_RT_diff_GP + selfpaced_target_RT_diff_sertes
"
LA_fit_adult = cfa(LA_model, filter(df, age_years > 14))
LA_fit_all = cfa(LA_model, df)
LA_fit_adult = cfa(LA_model, filter(df, age_years > 14), missing = "ML", estimator = "ML")
LA_fit_all = cfa(LA_model, df, missing = "ML", estimator = "ML")
summary(LA_fit_adult, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
summary(LA_fit_all, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
# configural invariance
fit1_LA = cfa(LA_model, data = df2, group = "age_group", missing = "ML", estimator = "ML")
# weak invariance
fit2_LA = cfa(LA_model, data = df2, group = "age_group", missing = "ML", estimator = "ML",
group.equal = "loadings")
# strong invariance
fit3_LA = cfa(LA_model, data = df2, group = "age_group", missing = "ML", estimator = "ML",
group.equal = c("intercepts", "loadings"))
# model comparison tests
lavTestLRT(fit1_LA, fit2_LA, fit3_LA)
# configural invariance
fit1_LA = cfa(LA_model, data = df2, group = "age_group", missing = "ML", estimator = "ML")
# weak invariance
fit2_LA = cfa(LA_model, data = df2, group = "age_group", missing = "ML", estimator = "ML",
group.equal = "loadings")
# strong invariance
fit3_LA = cfa(LA_model, data = df2, group = "age_group", missing = "ML", estimator = "ML",
group.equal = c("intercepts", "loadings"))
# model comparison tests
lavTestLRT(fit1_LA, fit2_LA, fit3_LA)
# configural invariance
fit1_LA = cfa(LA_model, data = df2, group = "age_group", missing = "ML", estimator = "ML")
# weak invariance
#fit2_LA = cfa(LA_model, data = df2, group = "age_group", missing = "ML", estimator = "ML",
#            group.equal = "loadings")
# strong invariance
#fit3_LA = cfa(LA_model, data = df2, group = "age_group", missing = "ML", estimator = "ML",
group.equal = c("intercepts", "loadings"))
# configural invariance
fit1_LA = cfa(LA_model, data = df2, group = "age_group", missing = "ML", estimator = "ML")
# weak invariance
#fit2_LA = cfa(LA_model, data = df2, group = "age_group", missing = "ML", estimator = "ML",
#            group.equal = "loadings")
# strong invariance
#fit3_LA = cfa(LA_model, data = df2, group = "age_group", missing = "ML", estimator = "ML",
#            group.equal = c("intercepts", "loadings"))
# model comparison tests
#lavTestLRT(fit1_LA, fit2_LA, fit3_LA)
lavInspect(fit, "coverage")
lavInspect(fit1_LA, "coverage")
# configural invariance
fit1_LA = cfa(LA_model, data = df2, group = "age_group", missing = "ML", estimator = "ML")
# weak invariance
fit2_LA = cfa(LA_model, data = df2, group = "age_group", missing = "ML", estimator = "ML",
group.equal = "loadings")
# strong invariance
fit3_LA = cfa(LA_model, data = df2, group = "age_group", missing = "ML", estimator = "ML",
group.equal = c("intercepts", "loadings"))
# model comparison tests
lavTestLRT(fit1_LA, fit2_LA, fit3_LA)
lavInspect(fit1_LA, "coverage")
lavInspect(fit2_LA, "coverage")
lavInspect(fit3_LA, "coverage")
