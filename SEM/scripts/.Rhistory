stroop_RT_score,
stroop_ACC_score,
simon_RT_score,
simon_ACC_score
) %>%
kmeansvar(init = 2, nstart = 1000)
summary(km)
km = df %>%
select(
MENYET_mean_ACC_all,
OMR_read_syls,
predictive_RT_score,
selfpaced_target_RT_diff_GP,
selfpaced_target_RT_diff_sertes,
trog_pragm_ACC_mean
) %>%
kmeansvar(init = 2, nstart = 1000)
summary(km)
km = df %>%
select(
MENYET_mean_ACC_all,
OMR_read_syls,
predictive_RT_score,
selfpaced_target_RT_diff_GP,
selfpaced_target_RT_diff_sertes,
trog_pragm_ACC_mean
) %>%
kmeansvar(init = 5, nstart = 1000)
summary(km)
View(km)
View(km)
View(df)
View(df)
model_full =
"
SL_RT =~ SEGM_AL_medRT_train + SEGM_AL_medRT_TRN3_RND4 + SEGM_AL_medRT_RND4_REC5
SL_tribi =~ SEGM_AL_2AFC_bigram + SEGM_AL_2AFC_trigram
SL_AGL =~ AGL_2AFC_sent + AGL_prod
SL_SEGM =~ SEGM_AL_SEGM_prod_data
SL_phr =~ AGL_2AFC_phr
COG_RT =~ PROC_SPEED_vis_RT_med + PROC_SPEED_vis_dec_RT_med + PROC_SPEED_ac_RT_med
COG_DS =~ digit_span_forward_span + digit_span_backward_span
COG_nback =~ n_back_nback_1_dprime + n_back_nback_2_dprime + n_back_nback_3_dprime
COG_stroop =~ stroop_RT_score + stroop_ACC_score
COG =~ simon_RT_score
COG =~ simon_ACC_score
"
model_fit = cfa(model_full, df, missing = "ML", estimator = "ML")
model_fit = cfa(model_full, df, missing = "ML", estimator = "MLR")
summary(model_fit, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
model_full =
"
SL_RT =~ SEGM_AL_medRT_train + SEGM_AL_medRT_TRN3_RND4 + SEGM_AL_medRT_RND4_REC5
SL_tribi =~ SEGM_AL_2AFC_bigram + SEGM_AL_2AFC_trigram
SL_AGL =~ AGL_2AFC_sent + AGL_prod
SL_SEGM =~ SEGM_AL_SEGM_prod_data
SL_phr =~ AGL_2AFC_phr
COG_RT =~ PROC_SPEED_vis_RT_med + PROC_SPEED_vis_dec_RT_med + PROC_SPEED_ac_RT_med
COG_DS =~ digit_span_forward_span + digit_span_backward_span
COG_nback =~ n_back_nback_1_dprime + n_back_nback_2_dprime + n_back_nback_3_dprime
COG_stroop =~ stroop_RT_score + stroop_ACC_score
COG =~ simon_RT_score
COG =~ simon_ACC_score
LANG_MENYET =~ MENYET_mean_ACC_all
LANG_OMR =~ OMR_read_syls
LANG_pred =~ predictive_RT_score
LANG_space =~ selfpaced_target_RT_diff_GP + selfpaced_target_RT_diff_sertes
LANG_TROG =~ trog_pragm_ACC_mean
"
model_fit = cfa(model_full, df, missing = "ML", estimator = "MLR")
summary(model_fit, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
model_SL_fit = cfa(model_SL, df, missing = "ML", estimator = "MLR")
model_SL =
"
SL_RT =~ SEGM_AL_medRT_train + SEGM_AL_medRT_TRN3_RND4 + SEGM_AL_medRT_RND4_REC5
SL_tribi =~ SEGM_AL_2AFC_bigram + SEGM_AL_2AFC_trigram
SL_AGL =~ AGL_2AFC_sent + AGL_prod
SL_SEGM =~ SEGM_AL_SEGM_prod_data
SL_phr =~ AGL_2AFC_phr
"
model_SL_fit = cfa(model_SL, df, missing = "ML", estimator = "MLR")
summary(model_SL_fit, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
model_SL =
"
SL_RT =~ SEGM_AL_medRT_train + SEGM_AL_medRT_TRN3_RND4 #+ SEGM_AL_medRT_RND4_REC5
SL_tribi =~ SEGM_AL_2AFC_bigram + SEGM_AL_2AFC_trigram
SL_AGL =~ AGL_2AFC_sent + AGL_prod
SL_SEGM =~ SEGM_AL_SEGM_prod_data
SL_phr =~ AGL_2AFC_phr
"
model_SL_fit = cfa(model_SL, df, missing = "ML", estimator = "MLR")
summary(model_SL_fit, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
model_SL =
"
#SL_RT =~ SEGM_AL_medRT_train + SEGM_AL_medRT_TRN3_RND4 + SEGM_AL_medRT_RND4_REC5
SL_RT =~ SEGM_AL_medRT_TRN3_RND4 + SEGM_AL_medRT_RND4_REC5
SL_tribi =~ SEGM_AL_2AFC_bigram + SEGM_AL_2AFC_trigram
SL_AGL =~ AGL_2AFC_sent + AGL_prod
SL_SEGM =~ SEGM_AL_SEGM_prod_data
SL_phr =~ AGL_2AFC_phr
"
model_SL_fit = cfa(model_SL, df, missing = "ML", estimator = "MLR")
summary(model_SL_fit, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
model_SL =
"
SL_RT =~ SEGM_AL_medRT_train + SEGM_AL_medRT_TRN3_RND4 + SEGM_AL_medRT_RND4_REC5
SL_tribi =~ SEGM_AL_2AFC_bigram + SEGM_AL_2AFC_trigram
SL_AGL =~ AGL_2AFC_sent + AGL_prod
SL_SEGM =~ SEGM_AL_SEGM_prod_data
SL_phr =~ AGL_2AFC_phr
"
model_SL_fit = cfa(model_SL, df, missing = "ML", estimator = "MLR")
summary(model_SL_fit, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
model_SL2 =
"
SL_RT =~ SEGM_AL_medRT_TRN3_RND4 + SEGM_AL_medRT_RND4_REC5
SL_tribi =~ SEGM_AL_2AFC_bigram + SEGM_AL_2AFC_trigram
SL_AGL =~ AGL_2AFC_sent + AGL_prod
SL_SEGM =~ SEGM_AL_SEGM_prod_data
SL_phr =~ AGL_2AFC_phr
"
model_SL2_fit = cfa(model_SL2, df, missing = "ML", estimator = "MLR")
summary(model_SL2_fit, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
model_COG =
"
COG_RT =~ PROC_SPEED_vis_RT_med + PROC_SPEED_vis_dec_RT_med + PROC_SPEED_ac_RT_med
COG_DS =~ digit_span_forward_span + digit_span_backward_span
COG_nback =~ n_back_nback_1_dprime + n_back_nback_2_dprime + n_back_nback_3_dprime
COG_stroop =~ stroop_RT_score + stroop_ACC_score
COG =~ simon_RT_score
COG =~ simon_ACC_score
"
model_COG_fit = cfa(model_COG, df, missing = "ML", estimator = "MLR")
summary(model_COG_fit, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
model_COG =
"
COG_RT =~ PROC_SPEED_vis_RT_med + PROC_SPEED_vis_dec_RT_med + PROC_SPEED_ac_RT_med
COG_DS =~ digit_span_forward_span + digit_span_backward_span
COG_nback =~ n_back_nback_1_dprime + n_back_nback_2_dprime + n_back_nback_3_dprime
COG_stroop =~ stroop_RT_score + stroop_ACC_score
COG_simonRT =~ simon_RT_score
COG_simonACC =~ simon_ACC_score
"
model_COG_fit = cfa(model_COG, df, missing = "ML", estimator = "MLR")
summary(model_COG_fit, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
model_full =
"
SL_RT =~ SEGM_AL_medRT_train + SEGM_AL_medRT_TRN3_RND4 + SEGM_AL_medRT_RND4_REC5
SL_tribi =~ SEGM_AL_2AFC_bigram + SEGM_AL_2AFC_trigram
SL_AGL =~ AGL_2AFC_sent + AGL_prod
SL_SEGM =~ SEGM_AL_SEGM_prod_data
SL_phr =~ AGL_2AFC_phr
COG_RT =~ PROC_SPEED_vis_RT_med + PROC_SPEED_vis_dec_RT_med + PROC_SPEED_ac_RT_med
COG_DS =~ digit_span_forward_span + digit_span_backward_span
COG_nback =~ n_back_nback_1_dprime + n_back_nback_2_dprime + n_back_nback_3_dprime
COG_stroop =~ stroop_RT_score + stroop_ACC_score
COG_simonRT =~ simon_RT_score
COG_simonACC =~ simon_ACC_score
LANG_MENYET =~ MENYET_mean_ACC_all
LANG_OMR =~ OMR_read_syls
LANG_pred =~ predictive_RT_score
LANG_space =~ selfpaced_target_RT_diff_GP + selfpaced_target_RT_diff_sertes
LANG_TROG =~ trog_pragm_ACC_mean
"
model_fit = cfa(model_full, df, missing = "ML", estimator = "MLR")
summary(model_fit, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
model_full =
"
SL_RT =~ SEGM_AL_medRT_TRN3_RND4 + SEGM_AL_medRT_RND4_REC5
SL_tribi =~ SEGM_AL_2AFC_bigram + SEGM_AL_2AFC_trigram
SL_AGL =~ AGL_2AFC_sent + AGL_prod
SL_SEGM =~ SEGM_AL_SEGM_prod_data
SL_phr =~ AGL_2AFC_phr
COG_RT =~ PROC_SPEED_vis_RT_med + PROC_SPEED_vis_dec_RT_med + PROC_SPEED_ac_RT_med
COG_DS =~ digit_span_forward_span + digit_span_backward_span
COG_nback =~ n_back_nback_1_dprime + n_back_nback_2_dprime + n_back_nback_3_dprime
COG_stroop =~ stroop_RT_score + stroop_ACC_score
COG_simonRT =~ simon_RT_score
COG_simonACC =~ simon_ACC_score
LANG_MENYET =~ MENYET_mean_ACC_all
LANG_OMR =~ OMR_read_syls
LANG_pred =~ predictive_RT_score
LANG_space =~ selfpaced_target_RT_diff_GP + selfpaced_target_RT_diff_sertes
LANG_TROG =~ trog_pragm_ACC_mean
"
model_fit = cfa(model_full, df, missing = "ML", estimator = "MLR")
summary(model_fit, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
model_LANG =
"
LANG_MENYET =~ MENYET_mean_ACC_all
LANG_OMR =~ OMR_read_syls
LANG_pred =~ predictive_RT_score
LANG_space =~ selfpaced_target_RT_diff_GP + selfpaced_target_RT_diff_sertes
LANG_TROG =~ trog_pragm_ACC_mean
"
model_LANG_fit = cfa(model_LANG, df, missing = "ML", estimator = "MLR")
summary(model_LANG_fit, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
library(tidyverse)
library(broom)
library(lavaan)
library(flexplavaan)
library(semTools)
library(semPlot)
library(tidySEM)
# Balint
filt_df = read.csv("~/GitHub/lendulet_language_SL/SEM/dataframes/filtered_SEM_df.csv")
filt_df = filt_df |>
mutate(
PROC_SPEED_vis_RT_med = -(PROC_SPEED_vis_RT_med),
PROC_SPEED_ac_RT_med = -(PROC_SPEED_ac_RT_med),
PROC_SPEED_vis_dec_RT_med = -(PROC_SPEED_vis_dec_RT_med),
PROC_SPEED_ac_dec_RT_med = -(PROC_SPEED_ac_dec_RT_med),
simon_RT_score = -(simon_RT_score),
simon_ACC_score = -(simon_ACC_score),
stroop_RT_score = -(stroop_RT_score),
stroop_ACC_score = -(stroop_ACC_score),
selfpaced_target_RT_diff_GP = -(selfpaced_target_RT_diff_GP),
selfpaced_plus1_RT_diff_mellekmondat = -(selfpaced_plus1_RT_diff_mellekmondat),
selfpaced_target_RT_diff_sertes = -(selfpaced_target_RT_diff_sertes)
)
model_RT =
"
# statistical learning
SL =~ SEGM_AL_medRT_TRN3_RND4 + SEGM_AL_medRT_RND4_REC5
#cognitive
COG_RT =~ PROC_SPEED_vis_RT_med + PROC_SPEED_vis_dec_RT_med + PROC_SPEED_ac_RT_med
COG_DS =~ digit_span_forward_span + digit_span_backward_span
COG_nback =~ n_back_nback_1_dprime + n_back_nback_2_dprime + n_back_nback_3_dprime
COG_stroop =~ stroop_RT_score + stroop_ACC_score
COG_simonRT =~ simon_RT_score
COG_simonACC =~ simon_ACC_score
# language
LANG_MENYET =~ MENYET_mean_ACC_all
LANG_OMR =~ OMR_read_syls
LANG_pred =~ predictive_RT_score
LANG_space =~ selfpaced_target_RT_diff_GP + selfpaced_target_RT_diff_sertes
LANG_TROG =~ trog_pragm_ACC_mean
# direct effect: c paths
LANG_MENYET ~ c11*SL
LANG_pred ~ c21*SL
LANG_space ~ c31*SL
LANG_OMR ~ c41*SL
LANG_TROG ~ c51*SL
# mediator regression: a paths (SL -> cog)
COG_DS ~ a11*SL
COG_simonRT ~ a21*SL
COG_simonACC ~ a31*SL
COG_nback ~ a41*SL
COG_RT ~ a51*SL
COG_stroop ~ a61*SL
# mediator regression: b paths (cog -> lang)
LANG_MENYET ~ b11*COG_DS + b12*COG_simonRT + b13*COG_simonACC + b14*COG_nback + b15*COG_RT + b16*COG_stroop
LANG_pred ~ b21*COG_DS + b22*COG_simonRT + b23*COG_simonACC + b24*COG_nback + b25*COG_RT + b26*COG_stroop
LANG_space ~ b31*COG_DS + b32*COG_simonRT + b33*COG_simonACC + b34*COG_nback + b35*COG_RT + b36*COG_stroop
LANG_OMR ~ b41*COG_DS + b42*COG_simonRT + b43*COG_simonACC + b44*COG_nback + b45*COG_RT + b46*COG_stroop
LANG_TROG ~ b51*COG_DS + b52*COG_simonRT + b53*COG_simonACC + b54*COG_nback + b55*COG_RT + b56*COG_stroop
# mediator residual covariance
COG_DS ~~ COG_simonRT
COG_DS ~~ COG_simonACC
COG_simonRT ~~ COG_simonACC
COG_DS ~~ COG_nback
COG_simonRT ~~ COG_nback
COG_simonACC ~~ COG_nback
COG_DS ~~ COG_RT
COG_simonRT ~~ COG_RT
COG_simonACC ~~ COG_RT
COG_nback ~~ COG_RT
COG_DS ~~ COG_stroop
COG_simonRT ~~ COG_stroop
COG_simonACC ~~ COG_stroop
COG_nback ~~ COG_stroop
COG_RT ~~ COG_stroop
# dependent residual covariance
LANG_MENYET ~~ LANG_pred
LANG_MENYET ~~ LANG_space
LANG_pred ~~ LANG_space
LANG_MENYET ~~ LANG_OMR
LANG_pred ~~ LANG_OMR
LANG_space ~~ LANG_OMR
LANG_TROG ~~ LANG_MENYET
LANG_TROG ~~ LANG_space
LANG_TROG ~~ LANG_pred
LANG_TROG ~~ LANG_OMR
# effect decomposition
# y1 ~ x1
ind_x1_m1_y1 := a11*b11
ind_x1_m2_y1 := a21*b12
ind_x1_m3_y1 := a31*b13
ind_x1_m4_y1 := a41*b14
ind_x1_m5_y1 := a51*b15
ind_x1_m6_y1 := a61*b16
ind_x1_y1 := ind_x1_m1_y1 + ind_x1_m2_y1 + ind_x1_m3_y1 + ind_x1_m4_y1 + ind_x1_m5_y1 + ind_x1_m6_y1
tot_x1_y1 := ind_x1_y1 + c11
# y2 ~ x1
ind_x1_m1_y2 := a11*b21
ind_x1_m2_y2 := a21*b22
ind_x1_m3_y2 := a31*b23
ind_x1_m4_y2 := a41*b24
ind_x1_m5_y2 := a51*b25
ind_x1_m6_y2 := a61*b26
ind_x1_y2 := ind_x1_m1_y2 + ind_x1_m2_y2 + ind_x1_m3_y2 + ind_x1_m4_y2 + ind_x1_m5_y2 + ind_x1_m6_y2
tot_x1_y2 := ind_x1_y2 + c21
# y3 ~ x1
ind_x1_m1_y3 := a11*b31
ind_x1_m2_y3 := a21*b32
ind_x1_m3_y3 := a31*b33
ind_x1_m4_y3 := a41*b34
ind_x1_m5_y3 := a51*b35
ind_x1_m6_y3 := a61*b36
ind_x1_y3 := ind_x1_m1_y3 + ind_x1_m2_y3 + ind_x1_m3_y3 + ind_x1_m4_y3 + ind_x1_m5_y3 + ind_x1_m6_y3
tot_x1_y3 := ind_x1_y3 + c31
# y4 ~ x1
ind_x1_m1_y4 := a11*b41
ind_x1_m2_y4 := a21*b42
ind_x1_m3_y4 := a31*b43
ind_x1_m4_y4 := a41*b44
ind_x1_m5_y4 := a51*b45
ind_x1_m6_y4 := a61*b46
ind_x1_y4 := ind_x1_m1_y4 + ind_x1_m2_y4 + ind_x1_m3_y4 + ind_x1_m4_y4 + ind_x1_m5_y4 + ind_x1_m6_y4
tot_x1_y4 := ind_x1_y4 + c41
# y5 ~ x1
ind_x1_m1_y5 := a11*b51
ind_x1_m2_y5 := a21*b52
ind_x1_m3_y5 := a31*b53
ind_x1_m4_y5 := a41*b54
ind_x1_m5_y5 := a51*b55
ind_x1_m6_y5 := a61*b56
ind_x1_y5 := ind_x1_m1_y5 + ind_x1_m2_y5 + ind_x1_m3_y5 + ind_x1_m4_y5 + ind_x1_m5_y5 + ind_x1_m6_y5
tot_x1_y5 := ind_x1_y5 + c51
# single indicator factors
stroop_RT_score ~~ 0.152*stroop_RT_score
simon_RT_score ~~ 0.274*simon_RT_score
PROC_SPEED_vis_dec_RT_med ~~ 0.043*PROC_SPEED_vis_dec_RT_med
MENYET_mean_ACC_all ~~ 0.334*MENYET_mean_ACC_all
predictive_RT_score ~~ 0.136*predictive_RT_score
trog_pragm_ACC_mean ~~ 0.326*trog_pragm_ACC_mean
"
model_fit_RT = sem(model_RT, filt_df, missing = "ML", estimator = "MLR")
summary(model_fit_RT, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
model_RT =
"
# statistical learning
SL =~ SEGM_AL_medRT_TRN3_RND4 + SEGM_AL_medRT_RND4_REC5
#cognitive
COG_RT =~ PROC_SPEED_vis_RT_med + PROC_SPEED_vis_dec_RT_med #+ PROC_SPEED_ac_RT_med
COG_DS =~ digit_span_forward_span + digit_span_backward_span
COG_nback =~  n_back_nback_2_dprime + n_back_nback_3_dprime # + n_back_nback_1_dprime
COG_stroop =~ stroop_RT_score #+ stroop_ACC_score
COG_simonRT =~ simon_RT_score
COG_simonACC =~ simon_ACC_score
# language
LANG_MENYET =~ MENYET_mean_ACC_all
LANG_OMR =~ OMR_read_syls
LANG_pred =~ predictive_RT_score
LANG_space =~ selfpaced_target_RT_diff_GP + selfpaced_target_RT_diff_sertes
LANG_TROG =~ trog_pragm_ACC_mean
# direct effect: c paths
LANG_MENYET ~ c11*SL
LANG_pred ~ c21*SL
LANG_space ~ c31*SL
LANG_OMR ~ c41*SL
LANG_TROG ~ c51*SL
# mediator regression: a paths (SL -> cog)
COG_DS ~ a11*SL
COG_simonRT ~ a21*SL
COG_simonACC ~ a31*SL
COG_nback ~ a41*SL
COG_RT ~ a51*SL
COG_stroop ~ a61*SL
# mediator regression: b paths (cog -> lang)
LANG_MENYET ~ b11*COG_DS + b12*COG_simonRT + b13*COG_simonACC + b14*COG_nback + b15*COG_RT + b16*COG_stroop
LANG_pred ~ b21*COG_DS + b22*COG_simonRT + b23*COG_simonACC + b24*COG_nback + b25*COG_RT + b26*COG_stroop
LANG_space ~ b31*COG_DS + b32*COG_simonRT + b33*COG_simonACC + b34*COG_nback + b35*COG_RT + b36*COG_stroop
LANG_OMR ~ b41*COG_DS + b42*COG_simonRT + b43*COG_simonACC + b44*COG_nback + b45*COG_RT + b46*COG_stroop
LANG_TROG ~ b51*COG_DS + b52*COG_simonRT + b53*COG_simonACC + b54*COG_nback + b55*COG_RT + b56*COG_stroop
# mediator residual covariance
COG_DS ~~ COG_simonRT
COG_DS ~~ COG_simonACC
COG_simonRT ~~ COG_simonACC
COG_DS ~~ COG_nback
COG_simonRT ~~ COG_nback
COG_simonACC ~~ COG_nback
COG_DS ~~ COG_RT
COG_simonRT ~~ COG_RT
COG_simonACC ~~ COG_RT
COG_nback ~~ COG_RT
COG_DS ~~ COG_stroop
COG_simonRT ~~ COG_stroop
COG_simonACC ~~ COG_stroop
COG_nback ~~ COG_stroop
COG_RT ~~ COG_stroop
# dependent residual covariance
LANG_MENYET ~~ LANG_pred
LANG_MENYET ~~ LANG_space
LANG_pred ~~ LANG_space
LANG_MENYET ~~ LANG_OMR
LANG_pred ~~ LANG_OMR
LANG_space ~~ LANG_OMR
LANG_TROG ~~ LANG_MENYET
LANG_TROG ~~ LANG_space
LANG_TROG ~~ LANG_pred
LANG_TROG ~~ LANG_OMR
# effect decomposition
# y1 ~ x1
ind_x1_m1_y1 := a11*b11
ind_x1_m2_y1 := a21*b12
ind_x1_m3_y1 := a31*b13
ind_x1_m4_y1 := a41*b14
ind_x1_m5_y1 := a51*b15
ind_x1_m6_y1 := a61*b16
ind_x1_y1 := ind_x1_m1_y1 + ind_x1_m2_y1 + ind_x1_m3_y1 + ind_x1_m4_y1 + ind_x1_m5_y1 + ind_x1_m6_y1
tot_x1_y1 := ind_x1_y1 + c11
# y2 ~ x1
ind_x1_m1_y2 := a11*b21
ind_x1_m2_y2 := a21*b22
ind_x1_m3_y2 := a31*b23
ind_x1_m4_y2 := a41*b24
ind_x1_m5_y2 := a51*b25
ind_x1_m6_y2 := a61*b26
ind_x1_y2 := ind_x1_m1_y2 + ind_x1_m2_y2 + ind_x1_m3_y2 + ind_x1_m4_y2 + ind_x1_m5_y2 + ind_x1_m6_y2
tot_x1_y2 := ind_x1_y2 + c21
# y3 ~ x1
ind_x1_m1_y3 := a11*b31
ind_x1_m2_y3 := a21*b32
ind_x1_m3_y3 := a31*b33
ind_x1_m4_y3 := a41*b34
ind_x1_m5_y3 := a51*b35
ind_x1_m6_y3 := a61*b36
ind_x1_y3 := ind_x1_m1_y3 + ind_x1_m2_y3 + ind_x1_m3_y3 + ind_x1_m4_y3 + ind_x1_m5_y3 + ind_x1_m6_y3
tot_x1_y3 := ind_x1_y3 + c31
# y4 ~ x1
ind_x1_m1_y4 := a11*b41
ind_x1_m2_y4 := a21*b42
ind_x1_m3_y4 := a31*b43
ind_x1_m4_y4 := a41*b44
ind_x1_m5_y4 := a51*b45
ind_x1_m6_y4 := a61*b46
ind_x1_y4 := ind_x1_m1_y4 + ind_x1_m2_y4 + ind_x1_m3_y4 + ind_x1_m4_y4 + ind_x1_m5_y4 + ind_x1_m6_y4
tot_x1_y4 := ind_x1_y4 + c41
# y5 ~ x1
ind_x1_m1_y5 := a11*b51
ind_x1_m2_y5 := a21*b52
ind_x1_m3_y5 := a31*b53
ind_x1_m4_y5 := a41*b54
ind_x1_m5_y5 := a51*b55
ind_x1_m6_y5 := a61*b56
ind_x1_y5 := ind_x1_m1_y5 + ind_x1_m2_y5 + ind_x1_m3_y5 + ind_x1_m4_y5 + ind_x1_m5_y5 + ind_x1_m6_y5
tot_x1_y5 := ind_x1_y5 + c51
# single indicator factors
stroop_RT_score ~~ 0.152*stroop_RT_score
simon_RT_score ~~ 0.274*simon_RT_score
PROC_SPEED_vis_dec_RT_med ~~ 0.043*PROC_SPEED_vis_dec_RT_med
MENYET_mean_ACC_all ~~ 0.334*MENYET_mean_ACC_all
predictive_RT_score ~~ 0.136*predictive_RT_score
trog_pragm_ACC_mean ~~ 0.326*trog_pragm_ACC_mean
"
model_fit_RT = sem(model_RT, filt_df, missing = "ML", estimator = "MLR")
summary(model_fit_RT, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
model_SL_RT =
"
SL_RT =~ SEGM_AL_medRT_TRN3_RND4 + SEGM_AL_medRT_RND4_REC5
COG_RT =~ PROC_SPEED_vis_RT_med + PROC_SPEED_vis_dec_RT_med + PROC_SPEED_ac_RT_med
COG_DS =~ digit_span_forward_span + digit_span_backward_span
COG_nback =~ n_back_nback_1_dprime + n_back_nback_2_dprime + n_back_nback_3_dprime
COG_stroop =~ stroop_RT_score + stroop_ACC_score
COG_simonRT =~ simon_RT_score
COG_simonACC =~ simon_ACC_score
LANG_MENYET =~ MENYET_mean_ACC_all
LANG_OMR =~ OMR_read_syls
LANG_pred =~ predictive_RT_score
LANG_space =~ selfpaced_target_RT_diff_GP + selfpaced_target_RT_diff_sertes
LANG_TROG =~ trog_pragm_ACC_mean
"
model_SL_RT_fit = cfa(model_SL_RT, df, missing = "ML", estimator = "MLR")
df = read.csv("~/GitHub/lendulet_language_SL/SEM/dataframes/filtered_SEM_df.csv")
model_SL_RT_fit = cfa(model_SL_RT, df, missing = "ML", estimator = "MLR")
summary(model_SL_RT_fit, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
model_SL_RT =
"
SL_RT =~ SEGM_AL_medRT_TRN3_RND4 + SEGM_AL_medRT_RND4_REC5 + SEGM_AL_medRT_train
COG_RT =~ PROC_SPEED_vis_RT_med + PROC_SPEED_vis_dec_RT_med + PROC_SPEED_ac_RT_med
COG_DS =~ digit_span_forward_span + digit_span_backward_span
COG_nback =~ n_back_nback_1_dprime + n_back_nback_2_dprime + n_back_nback_3_dprime
COG_stroop =~ stroop_RT_score + stroop_ACC_score
COG_simonRT =~ simon_RT_score
COG_simonACC =~ simon_ACC_score
LANG_MENYET =~ MENYET_mean_ACC_all
LANG_OMR =~ OMR_read_syls
LANG_pred =~ predictive_RT_score
LANG_space =~ selfpaced_target_RT_diff_GP + selfpaced_target_RT_diff_sertes
LANG_TROG =~ trog_pragm_ACC_mean
"
model_SL_RT_fit = cfa(model_SL_RT, df, missing = "ML", estimator = "MLR")
summary(model_SL_RT_fit, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
model_SL2 =
"
SL_RT =~ SEGM_AL_medRT_TRN3_RND4 + SEGM_AL_medRT_RND4_REC5
COG_PS =~ PROC_SPEED_vis_RT_med + PROC_SPEED_ac_RT_med
COG_PS_visdec =~ PROC_SPEED_vis_dec_RT_med
COG_DS =~ digit_span_forward_span + digit_span_backward_span
COG_nback =~ n_back_nback_2_dprime + n_back_nback_3_dprime
COG_stroop =~ stroop_RT_score
COG_simonRT =~ simon_RT_score
COG_simonACC =~ simon_ACC_score
LANG_MENYET =~ MENYET_mean_ACC_all
LANG_OMR =~ OMR_read_syls
LANG_pred =~ predictive_RT_score
LANG_space =~ selfpaced_target_RT_diff_GP + selfpaced_target_RT_diff_sertes
LANG_TROG =~ trog_pragm_ACC_mean
"
model_SL2_fit = cfa(model_SL2, df, missing = "ML", estimator = "MLR")
summary(model_SL2_fit, standardized = TRUE, rsquare = TRUE, fit.measures = TRUE)
